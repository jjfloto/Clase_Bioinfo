import Bio
print(Bio.__version__)import Bio
import Bio
quit()
import Bio
print(Bio.__version__)
quit()
import Bio
print(Bio.__version__)
from Bio.Seq import Seq
my_seq = Seq("AGTACACTGGT")
my_seq
my_seq.complement()
my_seq.reverse_complement()
quit()
import os
os.listdir()
from Bio import SeqIO
dna_file = "Sars_cov.dna.fa"
for record in SeqIO.parse(dna_file, "fasta"):
    print(record)
dna_file
dna_file="Sars_cov.dna.fa"
for record in SeqIO.parse(dna_file, "fasta"):
print(record)
from Bio import SeqIO
dna_file = "Sars_cov.dna.fa"
for record in SeqIO.parse(dna_file, "fasta"):
    print(record)
from Bio import SeqIO
dna_file = "Sars_cov.dna.fa"
for record in SeqIO.parse(dna_file, "fasta"):
    print(record)
for record in SeqIO.parse(dna_file, "fasta"):
    print(record.seq)
    print(len(record.seq))
for record in SeqIO.parse(dna_file, "fasta"):
	print(record)
for record in SeqIO.parse(dna_file, "fasta"):
print(record.seq)
for record in SeqIO.parse(dna_file, "fasta"):
 print(record.seq)
 print(len(record.seq))
prot_file= "Sars_cov.prot.fa"
for ñilas in SeqIO.parse(prot_file, "fasta"):
print(ñilas.id)
for ñilas in SeqIO.parse(prot_file, "fasta"):
 print(ñilas.id)
for record in SeqIO.parse(prot_file, "fasta"):
    print(record.id,len(record.seq),record.description)
print("oña")
print("o"+"ña")
print("o na")
print("o"+"ña")
import Bio
from Bio.SeqRecord import SeqRecord
from Bio import SeqIO
# define una variable para abrir el archivo fasta como input
dna_file = SeqIO.read('Sars_cov.dna.fa', "fasta")
# define una variable para la secuencia completa del covid
covid19_seq = dna_file.seq
# cuenta la longitud del genoma de covid
print(f'El genoma del virus que causa Covid-19 (SARS-CoV-2) consiste de {len(covid19_seq)} bases.')
covid19_seq[:50]
# Y de atrás para delante
covid19_seq[-50]
covid19_seq[:50]
covid19_seq[-50]
## Condicionales lógicos
5 == 5
5 == 4
4 < 5
# El mismo ejemplo de la terminal de imprimir los número de 1-10 con for loop
for i in range(1,10):
    print(i)
# El mismo ejemplo de la terminal de imprimir los número de 1-10 con while loop
i = 1 
while i<10:
    print(i)
    i += 1
start_codon="AUG"
for ñanga in range(len(covid19_seq)):
 if covid19_seq[i:i+3] == start_codon:
  print("el codon de inicio inicia en", ñanga)
  break
 else:
  print("no se encontro")
# Define el codón de inicio
start_codon = 'AUG'
# Escanea la secuencia hasta encontrar el patrón
for i in range(len(covid19_seq)):
    if covid19_seq[i:i+3] == start_codon:
        print('The start codon starts at index', i)
        break
else:
for ñanga in range(len(covid19_seq)):
 if covid19_seq[i:i+3] == start_codon:
        print('The start codon starts at index', i)
        break
else:
  print("no esta")
covid_mRNA = covid19_seq.transcribe()
print(covid_mRNA)
# Define el codón de inicio
start_codon = 'AUG'
# Escanea la secuencia hasta encontrar el patrón
for i in range(len(covid19_seq)):
    if covid19_seq[i:i+3] == start_codon:
        print('The start codon starts at index', i)
        break
else:
for i in range(len(covid19_seq)):
    if covid19_seq[i:i+3] == start_codon:
        print('The start codon starts at index', i)
        break
else:
    print('Codon not found in sequence.')
for i in range(len(covid19_seq)):
    if covid19_mRNA[i:i+3] == start_codon:
        print('The start codon starts at index', i)
        break
else:
    print('Codon not found in sequence.')
y
print(head(mRNA))
for i in range(len(covid19_mRNA)):
    if covid19_mRNA[i:i+3] == start_codon:
        print('The start codon starts at index', i)
        break
else:
    print('Codon not found in sequence.')
for i in range(len(covid_mRNA)):
    if covid_mRNA[i:i+3] == start_codon:
        print('The start codon starts at index', i)
        break
else:
    print('Codon not found in sequence.')
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
prot_file = "/Users/laura/docencia/eia/bioinfo/clase_python/Sars_cov.prot.fa"
for record in SeqIO.parse(prot_file, "fasta"):
    if (record.description.split()[9] == "glycoprotein"):
        print(record)
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
profe= "/Users/laura/docencia/eia/bioinfo/clase_python/Sars_cov.prot.fa"
for ñ in SeqIO.parse(profe, "fasta"):
 if (ñ.description.split()[9] == "glycoprotein"):
  print(ñ)
profe = "Sars_cov.prot.fa"
for ñ in SeqIO.parse(profe, "fasta"):
 if (ñ.description.split()[9] == "glycoprotein"):
  print(ñ)
for record in SeqIO.parse(profe, "fasta"):
    print(record.id,len(record.seq),record.description)
for record in SeqIO.parse(profe, "fasta"):
    print(record.description.split())
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
for record in SeqIO.parse(profe, "fasta"):
    if (record.description.split()[9] == "glycoprotein"):
        print(record)
glycoproteins = (record for record in SeqIO.parse(profe, "fasta") if (record.description.split()[9] == "glycoprotein"))
SeqIO.write(glycoproteins, "sars_covid19_glycoproteins.fa", "fasta")
import os
os.getcwd()
os.listdir()
#!/usr/local/bin/
# Script por Laura Salazar Jaramillo
# Genera un subconjunto de glicoproteinas de SARS-covid 19
# Importamos las librerías necesarias
import os
import sys
import Bio
from Bio import SeqIO
from Bio.Seq import Seq
# Archivos de entrada (inputs)
dna_file = "/home/lsalazarj/bicomp2024/Sars_cov.dna.fa"
prot_file = "Sars_cov.prot.fa"
# Listamos el tamano del genoma
for record in SeqIO.parse(dna_file, "fasta"):
    print("La longitud en nc del genoma es:",len(record.seq))
# Listamos los id y longitudes de las proteínas
for record in SeqIO.parse(prot_file, "fasta"):
    print(record.id,len(record.seq),record.description.split()[9])
# Seleccionamos las glicoproteínas y las guardamos en un archivo aparte
glycoproteins = (record for record in SeqIO.parse(prot_file, "fasta") if (record.description.split()[9] == "glycoprotein"))
#!/usr/local/bin/
# Script por Laura Salazar Jaramillo
# Genera un subconjunto de glicoproteinas de SARS-covid 19
# Importamos las librerías necesarias
import os
import sys
import Bio
from Bio import SeqIO
from Bio.Seq import Seq
# Archivos de entrada (inputs)
dna_file = "/Sars_cov.dna.fa"
prot_file = "Sars_cov.prot.fa"
# Listamos el tamano del genoma
for record in SeqIO.parse(dna_file, "fasta"):
    print("La longitud en nc del genoma es:",len(record.seq))
# Listamos los id y longitudes de las proteínas
for record in SeqIO.parse(prot_file, "fasta"):
    print(record.id,len(record.seq),record.description.split()[9])
# Seleccionamos las glicoproteínas y las guardamos en un archivo aparte
glycoproteins = (record for record in SeqIO.parse(prot_file, "fasta") if (record.description.split()[9] == "glycoprotein"))
SeqIO.write(glycoproteins, "sars_covid19_glycoproteins.fa", "fasta")
python glycoproteins.py > glycoproteins.out
quit()
#!/usr/local/bin/
# Genera un subconjunto de glicoproteinas de SARS-covid 19
# librerías necesarias
import os
import sys
import Bio
from Bio import SeqIO
from Bio.Seq import Seq
# Archivos de entrada (inputs)
dna_file = "Sars_cov.dna.fa"
prot_file = "Sars_cov.prot.fa"
# Listamos el tamano del genoma
for record in SeqIO.parse(dna_file, "fasta"):
    print("La longitud en nc del genoma es:",len(record.seq))
# Listamos los id y longitudes de las proteínas
for record in SeqIO.parse(prot_file, "fasta"):
    print(record.id,len(record.seq),record.description.split()[9])
# Seleccionamos las glicoproteínas y las guardamos en un archivo aparte
glycoproteins = (record for record in SeqIO.parse(prot_file, "fasta") if (record.description.split()[9] == "glycoprotein"))
SeqIO.write(glycoproteins, "sars_covid19_glycoproteins.fa", "fasta")
python glycoproteins.py > glycoproteins.out
quit()
import os
import Bio
Import sys
import sys
from Bio import SeqIO
from Bio.seq import Seq
from Bio.Seq import Seq
Cit_DNA = "CytBDNA.txt"
Cit_Prot="CytBProt.txt"
quit()
dnaCit="CytBDNA.txt"
protCit="CytBProt.txt"
for record in SeqIO.parse(dnaCit, "fasta"):
print("la longitud en nucleotidos es:" len(record.seq))
for record in SeqIO.parse(dnaCit, "fasta"):
print("la longitud en nucleotidos es:", len(record.seq))
import Bio
import sys
import os
for record in SeqIO.parse(dnaCit, "fasta"):
print("la longitud en nucleotidos es:", len(record.seq))
for record in SeqIO.parse(dnaCit, "fasta"):
	print("la longitud en nucleotidos es:", len(record.seq))
from Bio import SeqIO
for record in SeqIO.parse(dnaCit, "fasta"):
	print("la longitud en nucleotidos es:", len(record.seq))
for record in SeqIO.parse(dnaCit, "fasta"):
	print("la longitud en nucleotidos es:", len(record.seq), "ID:", record.id)
for record in SeqIO.parse(dnaProt, "fasta"):
	print("la longitud en nucleotidos es:", len(record.seq), "ID:", record.id)
for record in SeqIO.parse(protCit, "fasta"):
	print("la longitud en nucleotidos es:", len(record.seq), "ID:", record.id)
protCit="CytBProt.txt"
for record in SeqIO.parse(protCit, "fasta"):
	print("la longitud en nucleotidos es:", len(record.seq), "ID:", record.id)
quit()
Pcit="CytBProt.txt"
Dcit="CytBDNA.txt"
import Bio
import sys
import os
for record in SeqIO.parse(Pcit, "fasta"):
 print("longitud nc:",len(record.seq), "ID:" ,record.id)
from Bio import SeqIO
from Bio.Seq import SeqA
for record in SeqIO.parse(Pcit, "fasta"):
 print("longitud nc:",len(record.seq), "ID:" ,record.id)
for record in SeqIO.parse(Dcit, "fasta"):
 print("longitud nc:",len(record.seq), "ID:" ,record.id)
quit()
import Bio
import sys
import os
from Bio import SeqIO
from Bio.Seq import Seq
dnaC="CytBDNA.txt"
protC="CytBProt.txt"
for salome in SeqIO(dnaC, "fasta"):
 print("longitud nc y name:" ,len(salome.seq), salome.id)
for record in SeqIO(dnaC, "fasta"):
 print("longitud nc y name:" ,len(record.seq), record.id)
for record in SeqIO(dnaC, "fasta"):
 print("longitud nc y name:" ,len(record.seq))
for salome in SeqIO.parse(dnaC, "fasta"):
 print("longitud nc y name:" ,len(record.seq), salome.id)
for salome in SeqIO.parse(dnaC, "fasta"):
 print("longitud nc y name:",len(salome.seq), salome.id)
for salome in SeqIO.parse(protC, "fasta"):
 print("longitud nc y name:",len(salome.seq), salome.id)
for salome in SeqIO.parse(protC, "fasta"):
 print("traduccion del ADN",len(salome.seq), salome.id)
for salome in SeqIO.parse(dnaC, "fasta"):
 print("traduccion del ADN",len(salome.translate), salome.translate)
for salome in SeqIO.parse(dnaC.translate(), "fasta"):
 print("traduccion del ADN",len(salome.seq))
traduc=dnaC.translate()
for record in Seq.parce(dnaC, "fasta"):
mARN=record.seq.transcribe()
for record in Seq.parce(dnaC, "fasta"):
	mARN=record.seq.transcribe()
	prot=mARN.translate()
for record in SeqIO.parce(dnaC, "fasta"):
	mARN=record.seq.transcribe()
	prot=mARN.translate()
for record in SeqIO.parse(dnaC, "fasta"):
	mARN=record.seq.transcribe()
	prot=mARN.translate()
for record in SeqIO.parse(dnaC, "fasta"):
	mARN=record.seq.transcribe()
	prot=mARN.translate(table="Vertebrate Mitochondrial")
for record in SeqIO.parse(dnaC, "fasta"):
...     mARN=record.seq.transcribe()
...     prot=mARN.translate(table="Vertebrate Mitochondrial)
for record in SeqIO.parse(dnaC, "fasta"):
	mARN=record.seq.transcribe()
... prot=mARN.translate(table="Vertebrate Mitochondrial)
for record in SeqIO.parse(dnaC, "fasta"):
	mARN=record.seq.transcribe()
	prot=mARN.translate(table="Vertebrate Mitochondrial")
	print(prot)
quit()
def concuerda(secuencia,silga):
for base in secuencia:
def concuerda(secuencia,silga):
 for base in secuencia:
  base=sigla 
  if secuencia != base
def concuerda(secuencia,silga):
 for base in secuencia:
  base=sigla 
  if secuencia != base:
   return True
secuencia=["AAA","AAT","TAT","CTTAT"]
sigla="AT"
concuerda(secuencia,sigla)
def concuerda(secuencia,silga):
...  for base in secuencia:
...   base=sigla
...   if secuencia != base:
def concuerda(secuencia,silga):
...  for base in secuencia:
clear
quit()
import Bio
from Bio.SeqRecord import SeqRecord
from Bio import SeqIO
sec="ACTCGGTAC"
dna= Seq.read("sec", "fasta")
dna= SeqIO.read("sec", "fasta")
quit()
import Bio
from Bio.SeqRecord import SeqRecord
from Bio import SeqIO
seqs= list(SeqIO.parse("CytBDNA.txt", "fasta"))
print(seqs[15]) > Amphioxus.txt
quit()
import Bio
from Bio.SeqRecord import SeqRecord
from Bio import SeqIO
dna = SeqIO.read("Amphioxus.txt", "fasta")
quit()
import Bio
from Bio.Seq import Seq
s1="ATATATAT"
s2="CGCGCGCG"
s3=s2
s3=s2+s3
print(s3,"la secuencia es con tamaño de", len(s3))
print(s3.seq.translate())
s1=sq.seq
s1s=s1.seq
s1s=Seq(s1)
s2s=Seq(s2)
s3s=s1s+s2s
print(s3s)
print(s3s,len(s3s))
print(s3s.translate())
a = 5
a += 10
a
if s1s in s3s: 
 print("si estoy")
def calculator_melting(A,T,C,G):
 y=2*(A+T)+4*(C+G)
 return(y)
calculator_melting(2,3,4,5)
calculator_melting(2,5,4,3)
quit()
# Llamamos las librerías de bipython
import Bio
from Bio.Seq import Seq
# Definimos las secuencias con la función Seq de biopython
seq1=Seq("ACGTG") 
seq2=Seq("ACGTC")
seq3=Seq("ACGCC")
from Bio import Align #importa la librería para alineamientos
aligner = Align.PairwiseAligner() #esta función alinea por pares
alignments1_2 = aligner.align(seq1, seq2) # LISTA de alineamientos posibles entre las dos secuencias
for alignment in sorted(alignments1_2): # 
#    print("Score = %.1f:" % alignment.score)
    print(alignment)
for alignment in sorted(alignments1_2): 
    print(alignment)
    print(alignment.score)  
aligner.match_score = 1
aligner.mismatch_score = -1
aligner.open_gap_score = -1
for alignment in sorted(alignments1_2): 
    print(alignment)
    print(alignment.score) 
quit()
import os
import sys
import Bio
from Bio import SeqIO
from Bio.seq import Seq
import Bio.seq
dna="Emydura.fasta"
for record in SqIO.parse (dna, "fasta"):
prot=record.seq.translate(table="Vertebrate Mitochondrial")
for record in SeqIO.parse(dnaC, "fasta"):
	mARN=record.seq.transcribe()
	prot=mARN.translate(table="Vertebrate Mitochondrial")
	print(prot)
clear()
quit()
